#!/bin/sh

# Copyright 2000 BSDi, Inc. Concord, CA, USA
# Copyright 2001, 2002, 2003, 2004  Slackware Linux, Inc. Concord, CA, USA
# Copyright 2006, 2007, 2008, 2009, 2010, 2011  Patrick J. Volkerding, Sebeka, MN, USA
# Copyright 2013  Bart van der Hall, Istanbul, TR
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PKGNAM=openssh
VERSION=${VERSION:-7.1p1}
BUILD=${BUILD:-1}
TAG=${TAG:-_dlack}

# Set initial variables:
CWD=$(pwd)
TMP=${TMP:-/tmp/dlackware}
PKG=$TMP/package-$PKGNAM
OUTPUT=${OUTPUT:-/var/cache/dlackware}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) export ARCH=i486 ;;
    arm*) export ARCH=arm ;;
       *) export ARCH=$( uname -m ) ;;
  esac
fi

wget -c ftp://ftp.fsn.hu/pub/OpenBSD/OpenSSH/portable/${PKGNAM}-${VERSION}.tar.gz

NUMJOBS=${NUMJOBS:--j6}

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "arm" ]; then
  SLKCFLAGS="-O2 -march=armv4 -mtune=xscale"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "armel" ]; then
  SLKCFLAGS="-O2 -march=armv4t"
  LIBDIRSUFFIX=""
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

# Clean target location:
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT

# Prepare the framework and extract the package:
cd $TMP
rm -rf $PKGNAM-$VERSION
tar xvf $CWD/$PKGNAM-$VERSION.tar.?z* || exit 1
cd $PKGNAM-$VERSION
chown -R root:root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

cat $CWD/sshd_config-pam.diff | patch -p1

krb_flag="--with-kerberos5"


# Compile package:
CFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --mandir=/usr/man \
  --sysconfdir=/etc/ssh \
  --with-pam \
  --libexecdir=/lib/security \
  --with-md5-passwords \
  --with-default-path=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin \
  ${krb_flag} \
  --with-privsep-path=/var/empty \
  --with-privsep-user=sshd \
  --build=$ARCH-slackware-linux

make $NUMJOBS || make || exit 1

# Install the package:
make install DESTDIR=$PKG

find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Compress and if needed symlink the man pages:
if [ -d $PKG/usr/man ]; then
  ( cd $PKG/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd $manpagedir
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink $eachpage ).gz $eachpage.gz
          rm $eachpage
        done
        gzip -9 *.?
      )
    done
  )
fi

# Install directory used with PrivilegeSeparation option:
mkdir -p $PKG/var/empty
chmod 755 $PKG/var/empty

# Install docs:
mkdir -p $PKG/usr/doc/openssh-$VERSION
cp -a \
  CREDITS ChangeLog INSTALL LICENCE OVERVIEW \
  README README.privsep TODO \
  $PKG/usr/doc/openssh-$VERSION
chmod 644 $PKG/usr/doc/openssh-$VERSION/*

# If there's a ChangeLog, installing at least part of the recent history
# is useful, but don't let it get totally out of control:
if [ -r ChangeLog ]; then
  DOCSDIR=$(echo $PKG/usr/doc/*-$VERSION)
  cat ChangeLog | head -n 1000 > $DOCSDIR/ChangeLog
  touch -r ChangeLog $DOCSDIR/ChangeLog
fi

# Install also 'ssh-copy-id' and its manpage from contrib:
( cd contrib
  cp -a ssh-copy-id $PKG/usr/bin/ssh-copy-id
  chmod 755 $PKG/usr/bin/ssh-copy-id
  cat ssh-copy-id.1 | gzip -9c > $PKG/usr/man/man1/ssh-copy-id.1.gz
)

mkdir -p $PKG/etc/default
cat > ${PKG}/etc/default/sshd.new <<EOF
# Configuration file for the sshd service.

# The server keys are automatically generated if they ommited
# to change the automatic creation uncomment the approprite
# line.

# AUTOCREATE_SERVER_KEYS=RSAONLY
# AUTOCREATE_SERVER_KEYS=NO
AUTOCREATE_SERVER_KEYS=YES

# Do not change this option unless you have hardware random
# generator and you REALLY know what you are doing/

SSH_USE_STRONG_RNG=0
# SSH_USE_STRONG_RNG=1

# Daemon options
# OPTIONS=
EOF

( cd $PKG

  # Ditch the new host keys, since these have to be uniquely prepared on each machine:
  rm -f etc/ssh/ssh_host_dsa_key
  rm -f etc/ssh/ssh_host_dsa_key.pub
  rm -f etc/ssh/ssh_host_rsa_key
  rm -f etc/ssh/ssh_host_rsa_key.pub
  rm -f etc/ssh/ssh_host_key
  rm -f etc/ssh/ssh_host_key.pub

  # Set up the config script installation:
  mv etc/ssh/ssh_config etc/ssh/ssh_config.new
  mv etc/ssh/sshd_config etc/ssh/sshd_config.new

  # Add the init script as fallback if needed:
  mkdir -p etc/rc.d
  cat $CWD/rc.sshd > etc/rc.d/rc.sshd.new
  chmod 755 etc/rc.d/rc.sshd.new

  # Add the systemd unit files:
  mkdir -p lib/systemd/system

  cat $CWD/sshd.service > lib/systemd/system/sshd.service
  chmod 644 lib/systemd/system/sshd.service

  cat $CWD/sshd-keygen.service > lib/systemd/system/sshd-keygen.service
  chmod 644 lib/systemd/system/sshd-keygen.service

  cat $CWD/sshd@.service > lib/systemd/system/sshd@.service
  chmod 644 lib/systemd/system/sshd@.service

  cat $CWD/sshd.socket > lib/systemd/system/sshd.socket
  chmod 644 lib/systemd/system/sshd.socket


  # Add the pam stuff:
  mkdir -p etc/pam.d
  cat $CWD/sshd.pam > etc/pam.d/sshd.new
  chmod 0644 etc/pam.d/sshd.new

  # Copy runtime installation files:
  mkdir -p install
  cat $CWD/doinst.sh > install/doinst.sh
  cat $CWD/slack-desc > install/slack-desc
)

# Create the package itself:
cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAM-$VERSION-$ARCH-$BUILD$TAG.txz
